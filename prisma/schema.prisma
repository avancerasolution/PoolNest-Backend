// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://admin:admin123@localhost:5432/mydb"
}

enum Role {
  Client
  SuperAdmin
  Admin
  Technician
}

enum frequencyForService {
  WEEKLY
  EVERY_TWO_WEEKS
  EVERY_THREE_WEEKS
  EVERY_FOUR_WEEKS
}

enum laborCostType {
  PER_STOP
  PER_MONTH
  NONE
}

enum rateType {
  NONE
  PER_STOP_WITH_CHEMICAL
  PER_STOP_PLUS_CHEMICAL
  PER_MONTH_WITH_CHEMICAL
  PER_MONTH_PLUS_CHEMICAL
}

enum days {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model User {
  id                        String             @id @default(uuid())
  email                     String             @unique
  first_name                String
  last_name                 String
  username                  String             @unique
  user_type                 Role //enum 
  password                  String
  is_active                 Boolean            @default(true)
  color_code                String?
  see_other_tech            Boolean?
  manage_admin_panel        Boolean?
  manage_general_settings   Boolean?
  manage_route_stops        Boolean?
  rearrange_routes          Boolean?
  admin_id                  String?
  Admin                     User?              @relation("AdminToTechnician", fields: [admin_id], references: [id])
  Technicians               User[]             @relation("AdminToTechnician")
  Customer                  Customer[]
  WorkOrderType             WorkOrderType[]
  createdAt                 DateTime           @default(now()) // * default value (now)
  updatedAt                 DateTime           @updatedAt
  deletedAt                 DateTime?          @default(dbgenerated())
  Reading                   Reading[]
  Dosage                    Dosage[]
  ServiceChecklist          ServiceChecklist[]
  ServiceLocationAdmin      ServiceLocation[]  @relation("AdminToServiceLocation")
  Waterbody                 Waterbody[]        @relation("WaterbodytoAdmin")
  WaterbodyTechnician       Waterbody[]        @relation("WaterbodytoTechnician")
  Service                   Service[]          @relation("ServiceToAdmin")
  ServiceTechnician         Service[]          @relation("ServiceToTechnician")
  WorkOrderTechnician       WorkOrder[]        @relation("WorkOrderToTechnician")
  WorkOrderAdmin            WorkOrder[]        @relation("WorkOrderToAdmin")
  Equipment                 Equipment[]
  ItemNeeded                ItemNeeded[]
  ActiveServiceTechnician   ActiveService[]    @relation("TechnicianToActiveService")
  ActiveServiceAdmin        ActiveService[]    @relation("AdminToActiveService")
  TechnicianServiceLocation ServiceLocation[]  @relation("TechnicianToServiceLocation")
  ActiveWorkOrderAdmin      ActiveWorkOrder[]  @relation("ActiveWorkOrderToAdmin")
  ActiveWorkOrderTechnician ActiveWorkOrder[]  @relation("ActiveWorkOrderToTechnician")
  ShoppingItem              ShoppingItem[]

  Tags Tags[]
}

model Tags {
  Admin    User       @relation(fields: [admin_id], references: [id])
  admin_id String
  tag_id   String     @id @default(uuid())
  name     String
  Customer Customer[] @relation("CustomerTag")
}

model Customer {
  customer_id         String            @id @default(uuid())
  admin_id            String
  Admin               User              @relation(fields: [admin_id], references: [id])
  customer_type       String
  first_name          String
  last_name           String
  city                String
  state               String
  zipcode             String
  email               String            @unique
  status              String?
  mobile_no_primary   String
  mobile_no_secondary String?
  company_name        String?
  company_address     String?
  billing_address     String?
  billing_details     String?
  createdAt           DateTime          @default(now()) // * default value (now)
  updatedAt           DateTime          @updatedAt
  deletedAt           DateTime?         @default(dbgenerated())
  ServiceLocation     ServiceLocation[]
  Waterbody           Waterbody[]
  Service             Service[]
  WorkOrder           WorkOrder[]
  ActiveService       ActiveService[]
  ActiveWorkOrder     ActiveWorkOrder[]
  Tags                Tags[]            @relation("CustomerTag")
}

model ServiceLocation {
  service_location_id          String            @id @default(uuid())
  Admin                        User              @relation("AdminToServiceLocation", fields: [admin_id], references: [id])
  admin_id                     String
  customer                     Customer          @relation(fields: [customer_id], references: [customer_id])
  customer_id                  String
  Technician                   User              @relation("TechnicianToServiceLocation", fields: [technician_id], references: [id])
  technician_id                String
  name                         String
  city                         String
  state                        String
  email                        String
  mobile_no                    String
  address                      String
  location_code                String
  gate_code                    String?
  dog_name                     String?
  minutes_per_stop             Int
  sales_tax_group              String?
  rate                         Int
  labor_cost                   Int
  labor_cost_type              laborCostType
  notes                        String
  notify_sms                   Boolean
  notify_email                 Boolean
  notify_work_completion_sms   Boolean
  notify_work_completion_email Boolean
  WaterBody                    Waterbody[]
  createdAt                    DateTime          @default(now()) // * default value (now)
  updatedAt                    DateTime          @updatedAt
  Service                      Service[]
  WorkOrder                    WorkOrder[]
  ActiveService                ActiveService[]
  ActiveWorkOrder              ActiveWorkOrder[]
}

model Waterbody {
  waterbody_id        String              @id @default(uuid())
  Admin               User                @relation("WaterbodytoAdmin", fields: [admin_id], references: [id])
  admin_id            String
  Customer            Customer            @relation(fields: [customer_id], references: [customer_id])
  customer_id         String
  Service_location    ServiceLocation     @relation(fields: [service_location_id], references: [service_location_id])
  service_location_id String
  Technician          User                @relation("WaterbodytoTechnician", fields: [technician_id], references: [id])
  latitude            String
  longitude           String
  technician_id       String
  waterbody_type      String
  name                String
  assigned_day        days
  frequency           frequencyForService
  media               String[]            @default([])
  start_date          DateTime
  end_date            String
  createdAt           DateTime            @default(now()) // * default value (now)
  updatedAt           DateTime            @updatedAt
  Service             Service[]
  WorkOrder           WorkOrder[]
  Equipment           Equipment[]
  ItemNeeded          ItemNeeded[]
  ServiceChecklist    ServiceChecklist[]
  ActiveService       ActiveService[]
  ActiveWorkOrder     ActiveWorkOrder[]
  ShoppingItem        ShoppingItem[]
}

model WorkOrderType {
  work_order_type_id     String            @id @default(uuid())
  admin_id               String
  Admin                  User              @relation(fields: [admin_id], references: [id])
  name                   String
  color_code             String
  recurrence             String
  labor_cost             Float
  estimated_time_in_mins Int
  default_email_subject  String
  default_email_message  String
  check_list             String[]
  needs_invoiced         Boolean
  alert_office           Boolean
  photo_required         Boolean
  email_to_customer      Boolean
  allow_tech             Boolean
  userId                 Int?
  createdAt              DateTime          @default(now()) // * default value (now)
  updatedAt              DateTime          @updatedAt
  WorkOrder              WorkOrder[]
  ActiveWorkOrder        ActiveWorkOrder[]
}

model WorkOrder {
  work_order_id          String            @id @default(uuid())
  Admin                  User              @relation("WorkOrderToAdmin", fields: [admin_id], references: [id])
  admin_id               String
  Technician             User              @relation("WorkOrderToTechnician", fields: [technician_id], references: [id])
  technician_id          String
  Waterbody              Waterbody         @relation(fields: [waterbody_id], references: [waterbody_id])
  waterbody_id           String
  Service_location       ServiceLocation   @relation(fields: [service_location_id], references: [service_location_id])
  service_location_id    String
  Work_order_type        WorkOrderType     @relation(fields: [work_order_type_id], references: [work_order_type_id])
  work_order_type_id     String
  customer               Customer          @relation(fields: [customer_id], references: [customer_id])
  customer_id            String
  status                 String
  work_needed            String?
  work_performed         String?
  notes                  String?
  service_date           DateTime //this is the date the recurring date would work on to it
  estimated_time_minutes Int
  labor_cost             Int
  price                  Int
  labor_cost_paid        Boolean?          @default(false)
  ActiveWorkOrder        ActiveWorkOrder[]
  createdAt              DateTime          @default(now()) // * default value (now)
  updatedAt              DateTime          @updatedAt
  ShoppingItem           ShoppingItem[]
  deletedAt              DateTime?         @default(dbgenerated())
}

model ShoppingItem {
  shopping_item_id String    @id @default(uuid())
  Admin            User      @relation(fields: [admin_id], references: [id])
  admin_id         String
  waterbody        Waterbody @relation(fields: [waterbody_id], references: [waterbody_id])
  waterbody_id     String
  workOrder        WorkOrder @relation(fields: [work_order_id], references: [work_order_id])
  work_order_id    String
  description      String
  purchased        Boolean
  item_type        String
  assigned_to      String
  product_images   String[]
  createdAt        DateTime  @default(now()) // * default value (now)
  updatedAt        DateTime  @updatedAt
}

model Dosage {
  dosage_id             String        @id @default(uuid())
  admin_id              String
  Admin                 User          @relation(fields: [admin_id], references: [id])
  name                  String
  description           String
  unit_of_measurement   String
  cost_per_unit         Int
  include_service_price Boolean
  price_per_unit        Int
  values                Int[]
  createdAt             DateTime      @default(now()) // * default value (now)
  updatedAt             DateTime      @updatedAt
  ActiveService         ActiveService @relation(fields: [active_service_id], references: [active_service_id])
  active_service_id     String
}

model Reading {
  reading_id          String        @id @default(uuid())
  admin_id            String
  Admin               User          @relation(fields: [admin_id], references: [id])
  name                String
  description         String
  unit_of_measurement String
  values              Int[]
  createdAt           DateTime      @default(now()) // * default value (now)
  updatedAt           DateTime      @updatedAt
  ActiveService       ActiveService @relation(fields: [active_service_id], references: [active_service_id])
  active_service_id   String
}

model ServiceChecklist {
  service_checklist_id    String    @id @default(uuid())
  Admin                   User      @relation(fields: [admin_id], references: [id])
  admin_id                String
  description             String
  description_on_complete String
  createdAt               DateTime  @default(now()) // * default value (now)
  updatedAt               DateTime  @updatedAt
  Waterbody               Waterbody @relation(fields: [waterbody_id], references: [waterbody_id])
  waterbody_id            String
}

model Service {
  service_id          String              @id @default(uuid())
  Admin               User                @relation("ServiceToAdmin", fields: [admin_id], references: [id])
  admin_id            String
  Technician          User                @relation("ServiceToTechnician", fields: [technician_id], references: [id])
  technician_id       String
  waterbody           Waterbody           @relation(fields: [waterbody_id], references: [waterbody_id])
  waterbody_id        String
  Service_location    ServiceLocation     @relation(fields: [service_location_id], references: [service_location_id])
  service_location_id String
  customer            Customer            @relation(fields: [customer_id], references: [customer_id])
  customer_id         String
  assigned_day        days
  status              String
  frequency           frequencyForService
  rate                Int                 @default(0)
  labor_cost          Int                 @default(0)
  labor_cost_type     laborCostType       @default(NONE)
  minutes_per_stop    Int                 @default(0)
  start_date          DateTime
  stop_date           String?
  createdAt           DateTime            @default(now()) // * default value (now)
  updatedAt           DateTime            @updatedAt
  ActiveService       ActiveService[]
  deletedAt           DateTime?           @default(dbgenerated())
}

model Equipment {
  equipment_id String    @id @default(uuid())
  admin_id     String
  Admin        User      @relation(fields: [admin_id], references: [id])
  Waterbody    Waterbody @relation(fields: [waterbody_id], references: [waterbody_id])
  waterbody_id String
  name         String
  quantity     Int
  createdAt    DateTime  @default(now()) // * default value (now)
  updatedAt    DateTime  @updatedAt
}

model ItemNeeded {
  item_needed_id String    @id @default(uuid())
  Admin          User      @relation(fields: [admin_id], references: [id])
  Waterbody      Waterbody @relation(fields: [waterbody_id], references: [waterbody_id])
  waterbody_id   String
  admin_id       String
  name           String
  quantity       Int
  createdAt      DateTime  @default(now()) // * default value (now)
  updatedAt      DateTime  @updatedAt
}

model ActiveService {
  active_service_id   String              @id @default(uuid())
  Admin               User                @relation("AdminToActiveService", fields: [admin_id], references: [id])
  admin_id            String
  service             Service             @relation(fields: [service_id], references: [service_id])
  service_id          String
  service_status      String              @default("incomplete")
  status              String?
  Technician          User                @relation("TechnicianToActiveService", fields: [technician_id], references: [id])
  technician_id       String
  Service_location    ServiceLocation     @relation(fields: [service_location_id], references: [service_location_id])
  service_location_id String
  Waterbody           Waterbody           @relation(fields: [waterbody_id], references: [waterbody_id])
  frequency           frequencyForService
  customer            Customer            @relation(fields: [customer_id], references: [customer_id])
  customer_id         String
  waterbody_id        String
  start_date          DateTime
  stop_date           String
  assigned_day        days
  assigned_date       DateTime
  rate                Int?
  labor_cost          Int
  labor_cost_type     laborCostType
  minutes_per_stop    Int
  price               Int?
  total               Int?
  payment_method      String?
  payment_status      String?
  dosages             Dosage[]
  readings            Reading[]
  media               String[]            @default([])
  createdAt           DateTime            @default(now()) // * default value (now)
  updatedAt           DateTime            @updatedAt
}

model ActiveWorkOrder {
  active_work_order_id   String          @id @default(uuid())
  Work_order             WorkOrder       @relation(fields: [work_order_id], references: [work_order_id])
  work_order_id          String
  Admin                  User            @relation("ActiveWorkOrderToAdmin", fields: [admin_id], references: [id])
  admin_id               String
  Technician             User            @relation("ActiveWorkOrderToTechnician", fields: [technician_id], references: [id])
  technician_id          String
  Waterbody              Waterbody       @relation(fields: [waterbody_id], references: [waterbody_id])
  waterbody_id           String
  Service_location       ServiceLocation @relation(fields: [service_location_id], references: [service_location_id])
  service_location_id    String
  Work_order_type        WorkOrderType   @relation(fields: [work_order_type_id], references: [work_order_type_id])
  work_order_type_id     String
  Customer               Customer        @relation(fields: [customer_id], references: [customer_id])
  customer_id            String
  status                 String
  work_order_status      String
  description            String
  service_date           DateTime
  estimated_time_minutes Int
  labor_cost             Int
  price                  Int
  labor_cost_paid        Boolean?        @default(false)
  createdAt              DateTime        @default(now()) // * default value (now)
  updatedAt              DateTime        @updatedAt
}
